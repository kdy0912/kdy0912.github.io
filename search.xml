<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计组期中复习</title>
      <link href="/2022/11/06/%E8%AE%A1%E7%BB%84%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/11/06/%E8%AE%A1%E7%BB%84%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="数值信息的表示方法">数值信息的表示方法</h2><ol><li><p>原码：符号位为0正1负+二进制数</p><p>原码，反码，补码的正数相同</p><p>负数反码：符号位+二进制数按位取反</p><p>负数补码：符号位+二进制数按位取反加1</p><p>移码为补码符号位取反</p></li><li><p>补码和移码都是平移得到的，但是前者是2的n+1次方，后者是2的n次方（字长为n+1位）</p></li><li><p>短浮点数：31（数符） | 30 - 23 （<strong>8位阶码，加127</strong>）|22 - 0（尾数，原码表示，省略开头的1）|</p></li><li><p>长浮点数：63（数符） | 62 - 52 （<strong>11位阶码，加1023</strong>）|51 - 0（尾数，原码表示，省略开头的1）|</p></li></ol><h2 id="指令系统">指令系统</h2><ol><li><p>1K = 2的10次方，1M = 2的20次方，8位(bit) = 1字节(byte)</p></li><li><p>一地址指令：<strong>隐含约定目的地的双操作数指令</strong>或者目的操作数的单操作数指令。</p></li><li><p>零地址指令可以是双操作数指令。</p></li><li><p>减少指令中<strong>地址数</strong>的方法是采用隐地址，寄存器间接寻址的优点：执行速度快，减少指令中<strong>地址字段的位数</strong></p></li><li><p>独立编址与统一编址</p><p>独立编址：<strong>将外设的寄存器看成一个独立的地址空间。</strong> I/O地址与存储地（内存）址分开独立编址，I/O端口地址不占用存储空间的地址范围。这样，在系统中就存在了另一种与存储地址无关的I/O地址。此时，需要使用<strong>专用的CPU指令</strong>来访问某种特定外设。</p><p>统一编址：<strong>寄存器参与内存统一编址。</strong> 外设接口中的I/O寄存器(即I/O端口)与主存（内存）单元一样看待，每个端口占用一个存储单元的地址（总线地址），将主存的一部分划分出来用作I/O的地址空间。（理解：把外设的寄存器当做是一个内存地址，从而以类似访问内存相同的方式来操作外设）。</p><p>区别：独立编址与统一编址的区别：独立编址访问外设有专门的I/O指令（比如：x86的in/out等指令），也就是独立编址会存在I/O空间的概念。而统一编址对外设的访问和都内存的访问指令可以是一样的，这类指令又被成为隐式I/O指令。</p></li><li><p>为了实现输入输出操作,指令中<strong>对单独编址方式,可以指明端口地址；对统一编址方式,可以指明寄存器的总线地址</strong>。</p></li><li><p>采用隐式I/O指令，是指用<strong>传送指令</strong>实现I/O操作。</p></li><li><p>若主存储器和外设独立编址，则CPU根据地址码区分访问的是存储器还是I/O接口。( × )</p></li></ol><h2 id="CPU子系统">CPU子系统</h2><ol><li><p>控制信号的产生方式：组合逻辑控制方式与微程序控制</p><p><strong>组合逻辑控制方式</strong></p><p>用<strong>组合逻辑电路</strong>形成逻辑或由<strong>微命令发生器</strong>发出所需微命令</p><p>优点：<strong>产生微命令快</strong>，执行效率高</p><p>缺点：设计不规整，设计效率低，不易修改。</p><p>应用：高速、小规模计算机</p><p><strong>微程序控制</strong></p><p>若干微命令→一条微指令</p><p>微命令：构成控制信号序列的最小单位，又称微信号，指那些<strong>直接作用于部件或控制门电路</strong>的命令。</p><p>若干微指令→一段微程序→一条机器指令</p><p>微程序控制：将控制器所需的微命令，以代码（微码）形式编成微指令，把微程序存入一个ROM构成的<strong>控制存储器</strong>（在CPU）中。</p><p>优点：设计效率高，易修改</p><p>缺点：<strong>速度慢</strong>，执行效率低</p><p>应用：速度不高，功能复杂的机器（系列机）</p></li><li><p>时序控制系统：</p><p>同步控制：不存在控制信号的交互，时序关系简单，划分规整（如将时序信号划分为<strong>工作周期、时钟周期（节拍）、脉冲</strong>等三级时序），控制不复杂，控制部件在结构上易于集中、设计方便，缺点是在时间的安排上可能不合理、利用不经济。</p><p>异步控制：无固定周期，数据传输采用异步应答，存在信息交互，时间紧凑合理，缺点是控制起来比较复杂。CPU内部或设备内部很少采用异步控制方式。</p><p>拓展同步控制：根据实际时间分配时钟周期数，时钟周期长度不变。</p></li><li><p>汇编语言程序员可见的寄存器：PC,SP</p></li><li><p>加法器运算速度与<strong>全加器</strong>与<strong>进位传递速度</strong>都有关系</p></li><li><p>并行加法器的进位链都是并行进位链。 （×）</p></li><li><p>采用分组进位的并行加法器，则组内与组间进位都是并行的。  （×）</p></li><li><p>为了读写存储单元，必须要地址使能信号EMAR有效。  （√）</p></li><li><p>例题：</p><p>某CPU组成：用SN74181构成的ALU一片，选择器A、B，移位器；通用寄存器R0～R3，暂存器C、D；指令寄存器IR，程序计数器PC，程序状态字寄存器PSW，堆栈指针SP；地址寄存器MAR，数据缓冲寄存器MDR；CPU内单向数据总线一组；控制器等部件。</p><p>问题：</p><p>1、画出一种CPU数据通路框图(寄存器级)。</p><p>2、请补充完善加法指令ADD (R2)+，X(R1)中的指令流程步骤（采用寄存器传送级语句，如R1→R0）并在下列空白处填上适当内容；</p><p>FT:  M→IR ，PC+1→PC</p><p>ST:  PC→MAR</p><p>​    M→MDR→C      (1)C中存放的信息是：</p><p>​    PC+1→PC</p><p>​    C+R1→MAR</p><p>​    M→MDR→C      (2)C中存放的信息是：</p><p>DT:  (3)</p><p>​     (4)</p><p>​     (5)</p><p>ET:  C+D-&gt;MDR</p><p>​     MDR-&gt;M</p><p>PC-&gt;MAR</p><p>（6）考虑整体优化，在源周期ST中，第2、3节拍的顺序是否可以交换？并说明原因。</p><p>(7)  ET周期的前两步能否安排在一个节拍？为什么？</p><p>3、请安排ET周期中第一个节拍C+D→MDR的微命令序列（不考虑时序切换）。</p><p>1、略</p><p>2、</p><p>(1)C中存放的信息是：形式地址 （或位移量）</p><p>​    (2)C中存放的信息是： 源操作数</p><p>​    (3)  R2-&gt; MAR</p><p>​    (4)  M-&gt;MDR-&gt;D</p><p>​    (5)  R2+1-&gt;R2</p><p>​    <strong>(6) 不能。从简化整体设计角度，应该尽量使不同寻址方式下<em>ST1的操作相同</em>。</strong></p><p>​    <strong>(7) 不能。因为运算结果经内总线到MDR采用<em>同步打入</em>方式，需要一个时钟周期，从MDR到M需要另外一个时钟周期。</strong></p><p>3、</p><p>答：C→A,D→B,A+B, DM, CPMDR</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用语法汇总（二）</title>
      <link href="/2022/10/28/JAVA%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/10/28/JAVA%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>概述</h1><ol><li><p>List , Set, Map都是接口，前两个继承至Collection接口，Map为独立接口</p></li><li><p>Set下有HashSet，LinkedHashSet，TreeSet</p></li><li><p>List下有ArrayList，Vector，LinkedList</p></li><li><p>Map下有Hashtable，LinkedHashMap，HashMap，TreeMap</p></li><li><p>Collection接口下还有个Queue接口，有PriorityQueue类</p></li></ol><p><img src="https://s2.loli.net/2022/10/28/wfZ5a9T2Hzu6NQq.jpg" alt="集合.jpg"></p><p><img src="https://s2.loli.net/2022/10/28/bvhLcXGpo4NqiI6.jpg" alt="Map.jpg"></p><h1>Collection接口</h1><h2 id="Collection集合中常用方法">Collection集合中常用方法</h2><ol><li><code>boolean add(E e)</code>：集合末尾添加元素</li><li><code>boolean remove(Object o)</code>：从此集合中移除指定元素，如果存在的话则返回true</li><li><code>void clear()</code>：移除此集合中的所有元素</li><li><code>int size()</code>：返回此集合中的元素个数</li><li><code>boolean isEmpty()</code>：如果此集合不包含元素，则返回 true</li><li><code>Object[] toArray()</code>：返回包含此集合中所有元素的数组</li><li><code>boolean contains(Object o)</code>：如果此集合包含指定的元素，则返回 true</li><li><code>Iterator&lt;E&gt; iterator()</code>：返回在此集合的元素上进行迭代的迭代器</li></ol><h2 id="List集合的特有方法">List集合的特有方法</h2><ol><li><code>void add(int index, E element)</code>：在指定位置添加元素</li><li><code>E remove(int index)</code>：在指定位置删除元素</li><li><code>int indexOf(Object o)</code>：返回指定元素第一次出现的索引（同理还有LastIndexOf）</li><li><code>E get(int index)</code>：获取指定位置的元素</li><li><code>E set(int index,E element)</code>：替换指定位置的元素</li><li><code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code>：截取集合</li><li><code>ListIterator&lt;E&gt; listIterator()</code>：集合迭代器</li></ol><h2 id="LinkedList的特有方法">LinkedList的特有方法</h2><p>获取、删除、添加</p><ol><li><code>public E getFirst()</code></li><li><code>public E getLast()</code></li><li><code>public E removeFirst()</code></li><li><code>public E removeLast()</code></li><li><code>public void addFirst(E e)</code></li><li><code>public void addLast(E e)</code></li></ol><h2 id="补充与总结">补充与总结</h2><ol><li><p>List,Set都是继承自Collection接口，Map则不是。</p></li><li><p>List特点：元素有放入顺序，元素可重复 ，Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉。</p><p>注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法 。另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。</p></li><li><p>Set和List对比：<br>Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。<br>List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。</p></li><li><p>ArrayList与LinkedList的区别和适用场景</p><p>Arraylist：优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高  （在内存里是连着放的）。缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。</p><p>LinkedList：优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。缺点：因为LinkedList要移动指针,所以查询操作性能比较低。</p><p>适用场景分析：</p><p>当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。</p></li><li><p>TreeSet 是二叉树实现的，Treeset中的数据是自动排好序的，不允许放入null值，HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例。</p><p>适用场景分析:</p><p>HashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。</p></li></ol><h1>Map接口</h1><h2 id="Map集合中常用方法">Map集合中常用方法</h2><ol><li><code>V get(Object key)</code>：返回 Map 集合中指定键对象所对应的值。V 表示值的数据类型</li><li><code>V put(K key, V value)</code>：向 Map 集合中添加键-值对，返回 key 以前对应的 value，如果没有， 则返回 null</li><li><code>V remove(Object key)</code>：从 Map 集合中删除 key 对应的键-值对，返回 key 对应的 value，如果没有，则返回null</li><li><code>Set entrySet()</code>：返回 Map 集合中所有键-值对的 Set 集合，此 Set 集合中元素的数据类型为 Map.Entry</li><li><code>Set keySet()</code>：返回 Map 集合中所有键对象的 Set 集合</li><li><code>void clear()</code>：移除此集合中的所有元素</li><li><code>int size()</code>：返回此集合中的元素个数</li><li><code>boolean isEmpty()</code>：如果此集合不包含元素，则返回 true</li><li><code>boolean containsKey(Object key)</code>：查询集合中是否包含指定key</li><li><code>boolean containsValue(Object value)</code>：查询集合中是否包含指定value</li></ol><h2 id="补充与总结-2">补充与总结</h2><ol><li><p>HashMap和HashTable：HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法。HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。HashMap允许空键值，而HashTable不允许。</p></li><li><p>HashMap：适用于Map中插入、删除和定位元素。<br>Treemap：适用于按自然顺序或自定义顺序遍历键(key)。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理——CPU子系统</title>
      <link href="/2022/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94CPU%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94CPU%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1>CPU基本组成</h1><h2 id="模型机数据通路框图">模型机数据通路框图</h2><p><img src="https://s2.loli.net/2022/10/17/jJFw5CuOKX2evGk.png" alt="cpu.png"></p><h2 id="各种寄存器的作用">各种寄存器的作用</h2><ol><li><p>通用寄存器组：一组可编程访问的寄存器。在指令系统中为这些R分配了编号，有：R0~R3，PC，SP，PSW。</p></li><li><p>暂存器：用户不能直接访问，用来暂存信息，在指令系统中没有为它们分配编号，有C、D。</p><p>暂存器C：从主存中读取源操作数或源操作数地址时，使用它。</p><p>暂存器D：从主存中读取目的作数或目的操作数地址时，或中间运算结果时，使用它。</p></li><li><p>指令寄存器IR：用来存放现行运行指令，它的输出是产生微操作命令序列的主要逻辑依据。为了提高读取指令的速度，在主存与IR间建立直接传送通路，并且将IR扩充为指令队列（或指令栈），允许预取若干条指令。</p></li><li><p>程序计数器PC：PC提供后继指令地址，并送往与主存器相连接的地址寄存器（MAR）。后继指令地址=PC+n，模型机中为了简化起见，令n=1。</p></li><li><p>程序状态字寄存器PSW：PSW的内容就是表现的现行程序的状态。包括：特征位；编程设定位。</p></li><li><p>用作主存接口的寄存器：地址寄存器MAR、 数据缓冲寄存器MBR(MDR)，CPU访问主存时，首先送出地址码，然后送出/接收数据，当作用在MAR上的微命令EMAR为低电平时，MAR输出呈高阻态，与地址总线断开；当作用在MAR上的微命令EMAR为高电平时，MAR输出其内容（地址信息）送往地址总线。</p><p>地址寄存器MAR：读取指令/存取操作数/操作数地址时，CPU先将地址信息送入MAR，再由MAR经地址总线送往主存M，找到相应的主存单元。</p><p>数据缓冲寄存器MBR(MDR)由控制命令R/W决定传送方向。</p><p>R：由主存单元→数据总线→MDR</p><p>W：由MDR→数据总线→数据单元</p></li></ol><h1>寻址方式</h1><h2 id="常见寻址方式">常见寻址方式</h2><ol><li><p>立即寻址：在读取指令时也就从指令之中获得了操作数，即操作数包含在指令中。指令中在操作码字段后面的部分不是通常意义上的操作数地址，而是操作数本身，也就是在取出指令的同时也就取出了可以立即使用的操作数。</p></li><li><p>直接寻址（主存直接寻址）：若指令中给出的地址码是主存的某个单元号，操作数存放在该指定的主存单元中,这种寻址方式称为直接寻址或主存直接寻址方式。</p></li><li><p>寄存器直接寻址：若指令中给出的地址码是寄存器编号，操作数存放在该指定的寄存器中,这种寻址方式称为寄存器寻址或寄存器直接寻址方式。</p></li><li><p>间接寻址（主存间接寻址）：若操作数存放在主存某个存储单元中，则该主存单元的地址被称为操作数地址。</p><p>若操作数地址存放在另一主存单元之中（不是由指令直接给出），则该主存单元被称为间址单元，间址单元本身的地址被称为操作数地址的地址。</p><p>若指令中地址给出的是间址单元地址（即操作数地址的地址，而不是操作数地址，且在主存），从中读取操作数地址，按照操作数地址再次访问主存，从相应单元中读写操作数，这种寻址方式称为间接寻址或主存间接寻址方式。</p></li><li><p>寄存器间接寻址：若指令中给出的地址码是寄存器编码，被指定的寄存器中存放的是操作数地址，按照该地址访问某主存单元，该单元的内容为操作数，这种寻址方式称为寄存器间接寻址。</p></li><li><p>自增型寄存器间址：寄存器间址的一种变型,若指令中给出存放操作数地址的寄存器号,从寄存器中读出操作数地址后,寄存器内容加1。</p></li><li><p>自减型寄存器间址：寄存器间址的又一种变型。若指令中给出寄存器号，被指定的寄存器内容减1后作为操作数地址，按照该地址访问主存储器，相应的主存单元内容为操作数。</p></li><li><p>堆栈寻址：堆栈寻址方式是指操作数在堆栈中，指令隐含约定由堆栈指针SP寄存器提供栈顶单元地址（SP也可以编码形式出现在指令中），进行读出或写入的一种寻址方式。根据压入数据时栈顶单元的地址是减小还是增大或不变,可以将堆栈的工作方式大致分为向上生成方式、向下生成方式和栈顶固定方式三种。</p></li><li><p>多重间接寻址（主存多重间接寻址）：根据指令找到间址单元,其中的内容还不是操作数地址,而是又一层间址单元的地址；根据该地址访问又一层间址单元,取出来的才是操作数地址(存放操作数的存储单元的地址码)。多重间址有分为寄存器多重间址与存储器多重间址。</p></li><li><p>变址寻址：若指令中给出变址寄存器号和一个形式地址,变址寄存器的内容(称为变址量)与形式地址相加,得到操作数有效地址(即操作数实际地址),按照有效地址访问某主存单元,该单元的内容即为操作数,这种寻址方式称为变址寻址。</p></li><li><p>基址寻址：若指令中给出基址寄存器号和一个形式地址，基址寄存器内容（作为基准地址）与形式地址（作为位移量）相加，其和为操作数有效地址(即操作数实际地址)，按照该地址访问主存储器，该单元的内容即为操作数，这种寻址方式称为基址寻址。</p></li></ol><p><img src="https://s2.loli.net/2022/10/17/tm3DVoh4IrqWFUX.png" alt="基变寻址.png"></p><h2 id="模型机寻址方式">模型机寻址方式</h2><ol><li>寄存器寻址 R</li><li>寄存器间址 （R）寄存器内容是操作数地址</li><li>自减型寄存器间址  -（R）先减后取</li><li>自增型寄存器间址（R）+  先取后加</li><li>变址寻址 X（R）寄存器内容=位移量+基准地址</li><li>双重间址 @（R）+  寄存器内容是操作数地址的地址</li></ol><p><img src="https://s2.loli.net/2022/10/17/TAlB3ChGwpnHIZW.png" alt="模型机寻址.png"></p><h1>CPU指令流程</h1><h2 id="取指周期FT">取指周期FT</h2><p>所有指令的公共操作</p><p>M → IR ，PC + 1 → PC</p><h2 id="MOV指令">MOV指令</h2><table><thead><tr><th></th><th>( R )</th><th>-( R )</th><th>( R )+</th><th>@( R )+</th><th>X( R )</th></tr></thead><tbody><tr><td>ST0</td><td>Ri → MAR</td><td>Ri - 1 → Ri , MAR</td><td>Ri → MAR</td><td>Ri → MAR</td><td>PC→MAR</td></tr><tr><td>ST1</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td></tr><tr><td>ST2</td><td></td><td></td><td>Ri + 1 → Ri</td><td>Ri + 1 → Ri</td><td>PC + 1 → PC</td></tr><tr><td>ST3</td><td></td><td></td><td></td><td>C → MAR</td><td>C + Ri → MAR</td></tr><tr><td>ST4</td><td></td><td></td><td></td><td>M → MDR → C</td><td>M → MDR → C</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DT0</td><td>Rj  →  MAR</td><td>Rj - 1 → Rj , MAR</td><td>Rj → MAR</td><td>Rj → MAR</td><td>PC → MAR</td></tr><tr><td>DT1</td><td></td><td></td><td>Rj + 1→ Rj</td><td>Rj + 1 → Rj</td><td>M → MDR → D</td></tr><tr><td>DT2</td><td></td><td></td><td></td><td>M → MDR → MAR</td><td>PC + 1 → PC</td></tr><tr><td>DT3</td><td></td><td></td><td></td><td></td><td>D + Rj → MAR</td></tr></tbody></table><table><thead><tr><th></th><th>$SR · DR $</th><th>$SR · \overline{DR}$</th><th>$\overline{SR}·DR $</th><th>$\overline{SR}·\overline{DR}$</th></tr></thead><tbody><tr><td>ET0</td><td>Ri → Rj</td><td>Ri → MDR</td><td>C → Rj</td><td>C → MDR</td></tr><tr><td>ET1</td><td></td><td>MDR → M</td><td></td><td>MDR → M</td></tr></tbody></table><p>ET的最后一步一定是 PC → MAR</p><h2 id="双操作数指令">双操作数指令</h2><p>其中取指令和取源操作数与MOV指令相同</p><table><thead><tr><th></th><th>( R )</th><th>-( R )</th><th>( R )+</th><th>@( R )+</th><th>X( R )</th></tr></thead><tbody><tr><td>ST0</td><td>Ri → MAR</td><td>Ri - 1 → Ri , MAR</td><td>Ri → MAR</td><td>Ri → MAR</td><td>PC→MAR</td></tr><tr><td>ST1</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td><td>M → MDR → C</td></tr><tr><td>ST2</td><td></td><td></td><td>Ri + 1 → Ri</td><td>Ri + 1 → Ri</td><td>PC + 1 → PC</td></tr><tr><td>ST3</td><td></td><td></td><td></td><td>C → MAR</td><td>C + Ri → MAR</td></tr><tr><td>ST4</td><td></td><td></td><td></td><td>M → MDR → C</td><td>M→MDR→C</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DT0</td><td>Rj  →  MAR</td><td>Rj - 1 → Rj , MAR</td><td>Rj → MAR</td><td>Rj → MAR</td><td>PC → MAR</td></tr><tr><td>DT1</td><td>M → MDR → D</td><td>M → MDR → D</td><td>M → MDR → D</td><td>M → MDR → D</td><td>M → MDR → D</td></tr><tr><td>DT2</td><td></td><td></td><td>Rj + 1→ Rj</td><td>Rj + 1 → Rj</td><td>PC + 1 → PC</td></tr><tr><td>DT3</td><td></td><td></td><td></td><td>D → MAR</td><td>D + Rj → MAR</td></tr><tr><td>DT4</td><td></td><td></td><td></td><td>M → MDR → D</td><td>M → MDR → D</td></tr></tbody></table><table><thead><tr><th></th><th>$SR · DR $</th><th>$SR · \overline{DR}$</th><th>$\overline{SR}·DR $</th><th>$\overline{SR}·\overline{DR}$</th></tr></thead><tbody><tr><td>ET0</td><td>Ri OP Rj → Rj</td><td>Ri OP D → MDR</td><td>C OP Rj → Rj</td><td>C OP D → MDR</td></tr><tr><td>ET1</td><td></td><td>MDR → M</td><td></td><td>MDR → M</td></tr></tbody></table><p>ET的最后一步一定是 PC → MAR</p>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理——数值型数据的表示方法</title>
      <link href="/2022/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA/"/>
      <url>/2022/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1>进位计数制及其相互转换</h1><h2 id="构成进位计数制的两个基本要素">构成进位计数制的两个基本要素</h2><p>基数：每个数位中所允许的最大数码值+1或每个数位中所允许的最多数码个数。<br>权：是一个与所在数位相关的常数。<br>权与基数的关系：相邻两位的权值之比等于基数值。<br>二进制：权是2、基数是0、1<br>十进制：权是10、基数是0、1、2、3、4、5、6、7 、8、9<br>十六进制：权是16、基数是0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F</p><h2 id="各种进位计数制的相互表示">各种进位计数制的相互表示</h2><ol><li>十进制数转换为二进制数：整数部分除以2取余数，所得余数为二进制整数低位的值，继续操作直到商为0为止。小数部分乘以2取整数，所得整数部分为二进制小数高位的值，继续对所余小数操作，直到小数为0(或到达要求精度)为止。</li><li>二进制数转换为十进制数：按权位展开求和。</li><li>八进制、十六进制与二进制数的转换：从小数点起每三位（四位）一组，整数部分不够三位（四位）时在前面添0，小数部分不够三位（四位）时在后面添0。转二进制就反过来操作。</li><li>十进制数与八进制数、十六进制数间的转换：和前两条道理相同，略。</li></ol><h1>带符号数的表示</h1><ol><li><p>真值：正、负符号加绝对值表示数值。</p></li><li><p>机器数：在计算机内部使用的，连同数符一起数码化了的数。分类：原码、补码、反码。</p></li><li><p>原码：又称“符号－数值表示”，在以原码表示的正负数中，第一位为0(正数)；为1(负数)。<br>若 X = -1011，则五位字长的 $X_原$ = 11011，而八位字长的 $X_原$ = 10001011。</p><p>(1) 在原码表示中，真值 0 可以有两种不同的表示形式，可分别称为+0 与-0。<br>[+$X_原$] = 0.00…0，[-$X_原$] = 1.00…0 。它们的真值含义相同。</p><p>(2) 对于小数原码，表示范围：$-1&lt;X&lt;1$；对于整数原码 $X_n X_{n-1} …X_0$，表示范围：$-2^n &lt; X&lt;2^n$。</p><p>(3) 符号位不是数值的一部分，是人为地约定“0正1负”。所以在原码运算中需将符号位与有效数值部分分开处理，也就是取数的绝对值进行运算（又称为无符号数运算），而符号位单独处理。</p></li><li><p>补码：如果数为正，则正数的补码与原码表示形式相同；如果数为负，则将负数的原码<strong>除符号位外</strong>，其余各位取反后末尾再加1。<br>(1) $X_补 = M + X (mod M)$<br>式中，模为M，X是真值；$X_补$是数X的补码。若$X≥0$，模M可作为溢出量舍去，如同在时钟一例中舍去模12一样，则$X_补$=X。若X＜0，则$X_补=M+X =M-|X|$。</p><p>(2) 定点小数的补码定义式：若定点小数的补码序列为 $ X_0.X_1X_2…X_n $，其溢出量为 $2^1$（注意：符号位 $X_0$的权值是 $2^0$），因此以2为模。</p><p>(3) 定点整数的补码定义式：若定点整数的补码序列为 $X_n X_{n-1} …X_0$，即连同符号位有n+1位，其溢出量为$2^{n+1} $（注意：符号位 $X_n$的权值是$2^n$），因此以 $2^{n+1}$为模。</p></li><li><p>反码：又称“1的补码”，用反码表示时，左边的第一位也为符号位，0代表正数，1代表负数。对于负数，反码的数值是将原码数值部分按位求反，符号位1保持不变。而对于正数，反码和原码相同。</p></li><li><p>定点表示法：在计算机中，小数点位置固定不变的数称为定点数。表示数的范围和分辨率固定不变。<br>a.无符号定点整数：略去符号位的正整数。<br>b.带符号定点整数：是纯整数，小数点在最低位之后，最高位为符号位。<br>c.带符号定点小数：是纯小数，用原码或补码表示。</p></li><li><p>浮点表示法：<br>(1) 浮点数的格式：$N = ± R^E ×M$<br>式中N为真值， $R^E$为比例因子，M是尾数。对于某种浮点格式，R固定不变且隐含约定，因此浮点数代码序列中只需分别给出E和M两部分（连同它们的符号）。</p><p>(2) 移码：若阶码（连同一位阶符）共 m+1 位，代码序列为 $X_m X_{m-1} …X_0$<br>则$X_移=2^m+X （-2^m &lt; X&lt;2^m）$<br>式中X是阶码的真值，$2^m$是符号位 $X_移$ 的位权。因此$X_移$相当于将真值X沿数轴正向平移$2^m$，<br>所以称为移码。或者说将X增加$2^m$，所以又取名为增码。</p></li><li><p>补充</p><p><img src="https://s2.loli.net/2022/10/05/XPKFIeYzgymJV8x.jpg" alt="真值、标准移码、补码对照表"></p></li></ol><h1>IEEE754标准浮点格式</h1><p><img src="https://s2.loli.net/2022/10/05/uLIMvcKwfagrWUi.jpg" alt="IEEE754短浮点数格式"></p>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用语法汇总（一）</title>
      <link href="/2022/09/12/Java%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2022/09/12/Java%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>数组相关</h1><h2 id="数组的初始化">数组的初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];  <span class="comment">//动态初始化</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;  <span class="comment">//静态初始化完整版</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;  <span class="comment">//静态初始化简略版</span></span><br></pre></td></tr></table></figure><h2 id="获取数组长度">获取数组长度</h2><p>直接使用<code>数组名.length</code></p><h2 id="Arrays类中的方法介绍">Arrays类中的方法介绍</h2><ol><li><code>Arrays.sort(Object[] arr)</code>:对数组从小到大排序</li><li><code>Arrays.sort(Object[] arr, int start, int end)</code>：范围内对数组排序，左闭右开</li><li><code>Arrays.fill(Object[]arr, Object obj)</code>：填充相同元素</li><li><code>Arrays.equal(Object[] arr1,Object[] arr2)</code>：判断两个数组内容是否相同</li><li><code>Arrays.copyOf(Object[] arr)</code>：拷贝数组，返回一个新数组</li><li><code>Arrays.copyOfRange(Object[] arr, int from, int to)</code>：拷贝数组，指定起始位置和结束位置，如果超过原数组长度，会用null进行填充</li><li><code>Arrays.toString(Object[] arr)</code>：将数组中的内容全部打印出来</li><li><code>Arrays.binarySearch(Object[] arr, Object obj)</code>：二分查找法找指定元素的索引值(数组一定是排好序的，否则会出错。找到元素，只会返回最后一个位置)</li></ol><h1>字符串相关</h1><h2 id="长度相关">长度相关</h2><ol><li><code>length()</code>：获取字符串长度</li></ol><h2 id="判断相关">判断相关</h2><ol><li><code>contains(String)</code>：判断一个字符串中是否包含指定内容</li><li><code>startsWith(String)</code>和<code>endsWith(String)</code>：判断一个字符串是否以指定内容开头或结尾</li></ol><h2 id="位置相关">位置相关</h2><ol><li><code>charAt(int)</code> ：得到指定下标位置的字符，通常用于字符串的遍历</li><li><code>indexOf(string/char)</code>和<code>lastIndexOf(string/char)</code>：得到指定位置第一次出现和最后一次出现的下标</li><li><code>indexOf(string/char, fromIndex)</code>:得到从指定位置开始的第一次出现的下标</li></ol><h2 id="内容相关">内容相关</h2><ol><li><code>equals(String)</code>：比较字符串内容是否相同</li><li><code>toUpperCase()</code>和<code>toLowerCase()</code>：将字符串全部转换为大写或小写</li><li><code>replace(String, String)</code>：将某个内容全部替换为某个内容</li><li><code>substring(int, int)</code>：返回截取内容的字符串，从x到y-1</li></ol><h2 id="数组相关">数组相关</h2><ol><li><code>split(String)</code>：按指定字符（串）分割某个字符串，结果以字符串数组形式返回</li><li><code>toCharArray()</code> ：将字符串转换为字符数组</li><li><code>void getChars(int sourceStart, int sourceEnd, char[] target, int targetStart)</code>:截取多个字符,<br>子串包含从sourceStart到sourceEnd-1的字符。接收字符的数组由target指定，target中开始复制子串的下标值是targetStart</li></ol><h2 id="与基本数据的转化">与基本数据的转化</h2><ol><li><code>parseInt(String s)</code>：将数字格式的<strong>字符串转换为int</strong> （byte、short、long、<br>float、double）型数据。<br>例： <code>int x; String s = &quot;123456&quot;; x = Integer.parseInt(s);</code></li><li><code>public static String valueOf(int （byte、short、long、float、double） n)</code>：<strong>将int（byte、short、long、float、double）型数值转换为字符串</strong>.<br>例：<code>String str = String.valueOf(1234.789);</code></li></ol><h1>StringBuilder类中常用方法</h1><ol><li>StringBuilder的构造方法：<br><code>public StringBuilder()</code>:无参构造方法<br><code>public StringBuilder(int capacity)</code>:指定容量的字符串缓冲区对象<br><code>public StringBuilder(String str)</code>:指定字符串内容的字符串缓冲区对象</li><li><code>public int capacity()</code>:返回当前容量,理论值<br><code>public int length()</code>:返回长度(字符数),实际值（一般用这个）</li><li><code>public StringBuilder append(String str)</code>:可以把<strong>任意类型数据</strong>添加到字符串缓冲区里面，并返回字符串缓冲区本身<br><code>public StringBuilder insert(int offset,String str)</code>:在指定位置把<strong>任意类型数据</strong>插入到字符串缓冲区里面，并返回字符串缓冲区本身</li><li><code>char charAt(int index)</code>：获取指定索引出的字符</li><li><code>public StringBuilder delete(int start,int end)</code>：删除起始位置（含）到结尾位置（不含）之间的字符串</li><li>StringBuilder的截取功能：注意返回值类型是String，不是StringBuilder<br><code>public String substring(int start)</code><br><code>public String substring(int start,int end)</code></li><li>StringBuilder的替换功能：<br><code>public StringBuilder replace(int start,int end,String str)</code>:从start到end用str替换,同样为左闭右开</li><li>StringBuilder的反转功能：<br><code>public StringBuilder reverse()</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理——概论</title>
      <link href="/2022/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%A6%82%E8%AE%BA/"/>
      <url>/2022/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1>计算机系统的基本组成与特点</h1><br><ol><li>计算机的五大组成部分：运算器、控制器、存储器、输入设备、输出设备（包括总线、接口）</li><li>计算机内部的两大流：控制流、数据流</li><li>冯·诺依曼体制：采用二进制表示数据和指令、<strong>采用存储程序方式工作</strong>（核心）、由五大部分组成计算机系统的硬件，并规定了这五部分的基本功能</li></ol><br><h1>计算机系统的硬件组成</h1><br><h2 id="主要组成部件">主要组成部件</h2><ol><li>存储器</li><li>CPU：由运算器、控制器组成，控制器产生控制命令(微命令)，控制全机操作</li><li>输入/输出设备，功能为转换信息</li></ol><h2 id="硬件系统结构">硬件系统结构</h2><ol><li>以总线为基础的系统结构</li><li>采用通道或IOP的大型系统结构</li><li>模型机系统结构</li><li>接口</li></ol><br><h1>计算机系统的性能指标</h1><br><h2 id="基本字长">基本字长</h2><p>一般是指参加一次定点运算的操作数的位数。如：8、16、32、64位，它影响计算精度、指令功能。</p><h2 id="运算速度">运算速度</h2><ol><li>CPU主频：是计算机的振荡器输出的脉冲序列的频率，是计算机中一切操作所依据的时间基准信号，其高低决定了计算机工做速度的快慢。</li><li>时钟频率：是主频脉冲经分频后所形成的时钟脉冲序列的频率，两个相邻时钟脉冲之间的间隔时间是一个时钟周期时间，也称为节拍。</li></ol><h2 id="数据通路宽度与数据传输率">数据通路宽度与数据传输率</h2><ol><li>数据通路宽度：指数据总线一次能并行传送的数据位数</li><li>数据传输率：指数据总线每秒传送的数据量，也称为数据总线的带宽</li><li>公式：总线带宽 = 总线数据通路宽度 × 总线时钟频率 ÷ 8 （BPS）</li></ol><h2 id="存储容量">存储容量</h2><ol><li>主存容量：存储单元个数 × 位数，表示为：字数×字长（按字编址）或字节数（按字节编址）</li><li>外存容量：表示为字节数，与地址码位数无关</li></ol>]]></content>
      
      
      <categories>
          
          <category> 专业知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法与hexo常用命令</title>
      <link href="/2022/09/09/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/09/09/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1>Markdown基本语法</h1><p>官方教程：<a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a><br>更详细语法的链接：<a href="https://zhuanlan.zhihu.com/p/99319314">https://zhuanlan.zhihu.com/p/99319314</a></p><p><strong>两个星号可以加粗</strong>，<em>一个星号是斜体</em>。</p><p>无序列表是短横线，有序列表是数字加英文句号，记得加空格。</p><ul><li>无序列表1</li><li>无序列表2</li></ul><ol><li>有序列表1</li><li>有序列表2</li></ol><hr><h2 id="二级标题1">二级标题1</h2><blockquote><p>这是一段引用，大于号加空格为引用。</p></blockquote><p>这是一个<a href="http://www.baidu.com">链接</a>，链接名字用方括号，后面具体链接用小括号。</p><p>行内代码用一对反引号。 <code>Ctrl + /</code></p><h3 id="三级标题">三级标题</h3><p>代码块：用三个反引号括住，第一行写所用的语言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="二级标题2">二级标题2</h2><p>图片就是链接前面加了个感叹号。<br><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="百度"></p><hr><h1>hexo常用命令</h1><br>  <p><code>hexo n &quot;title&quot;</code> 创建新文章<br><code>hexo g -d</code>生成静态文件（gnerate），且文件生成后立即部署网站（deploy）<br><code>hexo publish &quot;title&quot;</code> 发表草稿<br><code>hexo s</code>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a><br><code>hexo clean</code> 清除缓存文件 (db.json) 和已生成的静态文件 (public)，在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令；</p>]]></content>
      
      
      <categories>
          
          <category> 课外拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
